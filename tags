!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
./bin/boot.bin	Makefile	/^.\/bin\/boot.bin: .\/src\/boot\/boot.asm$/;"	t	language:Make
./bin/kernel.bin	Makefile	/^.\/bin\/kernel.bin: $(FILES)$/;"	t	language:Make
./build/disk/disk.o	Makefile	/^.\/build\/disk\/disk.o: .\/src\/disk\/disk.c$/;"	t	language:Make
./build/disk/streamer.o	Makefile	/^.\/build\/disk\/streamer.o: .\/src\/disk\/streamer.c$/;"	t	language:Make
./build/fs/fat/fat16.o	Makefile	/^.\/build\/fs\/fat\/fat16.o: .\/src\/fs\/fat\/fat16.c$/;"	t	language:Make
./build/fs/file.o	Makefile	/^.\/build\/fs\/file.o: .\/src\/fs\/file.c$/;"	t	language:Make
./build/fs/pparser.o	Makefile	/^.\/build\/fs\/pparser.o: .\/src\/fs\/pparser.c$/;"	t	language:Make
./build/idt/idt.asm.o	Makefile	/^.\/build\/idt\/idt.asm.o: .\/src\/idt\/idt.asm$/;"	t	language:Make
./build/idt/idt.o	Makefile	/^.\/build\/idt\/idt.o: .\/src\/idt\/idt.c$/;"	t	language:Make
./build/io/io.asm.o	Makefile	/^.\/build\/io\/io.asm.o: .\/src\/io\/io.asm$/;"	t	language:Make
./build/kernel.asm.o	Makefile	/^.\/build\/kernel.asm.o: .\/src\/kernel.asm$/;"	t	language:Make
./build/kernel.o	Makefile	/^.\/build\/kernel.o: .\/src\/kernel.c$/;"	t	language:Make
./build/memory/heap/heap.o	Makefile	/^.\/build\/memory\/heap\/heap.o: .\/src\/memory\/heap\/heap.c$/;"	t	language:Make
./build/memory/heap/kheap.o	Makefile	/^.\/build\/memory\/heap\/kheap.o: .\/src\/memory\/heap\/kheap.c$/;"	t	language:Make
./build/memory/memory.o	Makefile	/^.\/build\/memory\/memory.o: .\/src\/memory\/memory.c$/;"	t	language:Make
./build/memory/paging/paging.asm.o	Makefile	/^.\/build\/memory\/paging\/paging.asm.o: .\/src\/memory\/paging\/paging.asm$/;"	t	language:Make
./build/memory/paging/paging.o	Makefile	/^.\/build\/memory\/paging\/paging.o: .\/src\/memory\/paging\/paging.c$/;"	t	language:Make
./build/string/string.o	Makefile	/^.\/build\/string\/string.o: .\/src\/string\/string.c$/;"	t	language:Make
.asm	src/linker.ld	/^    .asm : ALIGN(4096)$/;"	S	language:LdScript
.bss	src/linker.ld	/^    .bss : ALIGN(4096)$/;"	S	language:LdScript
.data	src/linker.ld	/^    .data : ALIGN(4096)$/;"	S	language:LdScript
.rodata	src/linker.ld	/^    .rodata : ALIGN(4096)$/;"	S	language:LdScript
.text	src/linker.ld	/^    .text : ALIGN(4096)$/;"	S	language:LdScript
8086 segment registers	README.md	/^#### 8086 segment registers$/;"	t	language:Markdown
A20 Line	README.md	/^### A20 Line$/;"	S	language:Markdown
Absolute Offset	README.md	/^#### Absolute Offset$/;"	t	language:Markdown
BITS	src/boot/boot.asm	/^BITS 16$/;"	l	language:Asm
BITS	src/boot/boot_before_FAT16.asm	/^BITS 16$/;"	l	language:Asm
BITS	src/boot/boot_before_protected.asm	/^BITS 16$/;"	l	language:Asm
Bootloader	README.md	/^## Bootloader$/;"	s	language:Markdown
BytesPerSector	src/boot/boot.asm	/^BytesPerSector dw 0x200      ; usually ignored.$/;"	d	language:Asm
CODE_SEG	src/boot/boot.asm	/^CODE_SEG equ gdt_code - gdt_start$/;"	d	language:Asm
CODE_SEG	src/boot/boot_before_FAT16.asm	/^CODE_SEG equ gdt_code - gdt_start$/;"	d	language:Asm
CODE_SEG	src/kernel.asm	/^CODE_SEG equ 0x08   ; kernal code seg$/;"	d	language:Asm
Cross Compiler Install	README.md	/^## Cross Compiler Install$/;"	s	language:Markdown
DATA_SEG	src/boot/boot.asm	/^DATA_SEG equ gdt_data - gdt_start$/;"	d	language:Asm
DATA_SEG	src/boot/boot_before_FAT16.asm	/^DATA_SEG equ gdt_data - gdt_start$/;"	d	language:Asm
DATA_SEG	src/kernel.asm	/^DATA_SEG equ 0x10   ; kernal data seg$/;"	d	language:Asm
Disk	README.md	/^## Disk$/;"	s	language:Markdown
DriveNumber	src/boot/boot.asm	/^DriveNumber db 0x80$/;"	d	language:Asm
EBADPATH	src/status.h	/^#define EBADPATH /;"	d	language:C++
EINVARG	src/status.h	/^#define EINVARG /;"	d	language:C++
EIO	src/status.h	/^#define EIO /;"	d	language:C++
ENOMEM	src/status.h	/^#define ENOMEM /;"	d	language:C++
Entering Protected Mode	README.md	/^### Entering Protected Mode$/;"	S	language:Markdown
FAT16(File Allocation Table 16 bits per FAT entry)	README.md	/^### FAT16(File Allocation Table 16 bits per FAT entry)$/;"	S	language:Markdown
FATCopies	src/boot/boot.asm	/^FATCopies db 0x02$/;"	d	language:Asm
FAT_FILE_ARCHIVED	src/fs/fat/fat16.c	/^#define FAT_FILE_ARCHIVED /;"	d	language:C	file:
FAT_FILE_DEVICE	src/fs/fat/fat16.c	/^#define FAT_FILE_DEVICE /;"	d	language:C	file:
FAT_FILE_HIDDEN	src/fs/fat/fat16.c	/^#define FAT_FILE_HIDDEN /;"	d	language:C	file:
FAT_FILE_READ_ONLY	src/fs/fat/fat16.c	/^#define FAT_FILE_READ_ONLY /;"	d	language:C	file:
FAT_FILE_RESERVED	src/fs/fat/fat16.c	/^#define FAT_FILE_RESERVED /;"	d	language:C	file:
FAT_FILE_SUBDIRECTORY	src/fs/fat/fat16.c	/^#define FAT_FILE_SUBDIRECTORY /;"	d	language:C	file:
FAT_FILE_SYSTEM	src/fs/fat/fat16.c	/^#define FAT_FILE_SYSTEM /;"	d	language:C	file:
FAT_FILE_VOLUME_LABEL	src/fs/fat/fat16.c	/^#define FAT_FILE_VOLUME_LABEL /;"	d	language:C	file:
FAT_ITEM_TYPE	src/fs/fat/fat16.c	/^typedef unsigned int FAT_ITEM_TYPE;$/;"	t	language:C	typeref:typename:unsigned int	file:
FAT_ITEM_TYPE_DIRECTORY	src/fs/fat/fat16.c	/^#define FAT_ITEM_TYPE_DIRECTORY /;"	d	language:C	file:
FAT_ITEM_TYPE_FILE	src/fs/fat/fat16.c	/^#define FAT_ITEM_TYPE_FILE /;"	d	language:C	file:
FILES	Makefile	/^FILES = .\/build\/kernel.asm.o .\/build\/kernel.o .\/build\/idt\/idt.asm.o .\/build\/idt\/idt.o /;"	m	language:Make
FILE_MODE	src/fs/file.h	/^typedef unsigned int FILE_MODE;$/;"	t	language:C++	typeref:typename:unsigned int
FILE_MODE_APPEND	src/fs/file.h	/^    FILE_MODE_APPEND,$/;"	e	language:C++	enum:__anond486e55a0203
FILE_MODE_INVALID	src/fs/file.h	/^    FILE_MODE_INVALID$/;"	e	language:C++	enum:__anond486e55a0203
FILE_MODE_READ	src/fs/file.h	/^    FILE_MODE_READ,$/;"	e	language:C++	enum:__anond486e55a0203
FILE_MODE_WRITE	src/fs/file.h	/^    FILE_MODE_WRITE,$/;"	e	language:C++	enum:__anond486e55a0203
FILE_SEEK_MOED	src/fs/file.h	/^typedef unsigned int FILE_SEEK_MOED;$/;"	t	language:C++	typeref:typename:unsigned int
FLAGS	Makefile	/^FLAGS = -g -ffreestanding -falign-jumps -falign-functions -falign-labels -falign-loops -fstrengt/;"	m	language:Make
FS_OPEN_FUNCTION	src/fs/file.h	/^typedef void*(*FS_OPEN_FUNCTION)(struct disk* disk, struct path_part* path, FILE_MODE mode);$/;"	t	language:C++	typeref:typename:void * (*)(struct disk * disk,struct path_part * path,FILE_MODE mode)
FS_RESOLVE_FUNCTION	src/fs/file.h	/^typedef int(*FS_RESOLVE_FUNCTION)(struct disk* disk);  \/\/ check if it`s valid fs$/;"	t	language:C++	typeref:typename:int (*)(struct disk * disk)
File System	README.md	/^## File System$/;"	s	language:Markdown
File System Structure	README.md	/^###   File System Structure$/;"	S	language:Markdown
HEAP_BLOCK_HAS_NEXT	src/memory/heap/heap.h	/^#define HEAP_BLOCK_HAS_NEXT /;"	d	language:C++
HEAP_BLOCK_IS_FIRST	src/memory/heap/heap.h	/^#define HEAP_BLOCK_IS_FIRST /;"	d	language:C++
HEAP_BLOCK_TABLE_ENTRY	src/memory/heap/heap.h	/^typedef unsigned char HEAP_BLOCK_TABLE_ENTRY;$/;"	t	language:C++	typeref:typename:unsigned char
HEAP_BLOCK_TABLE_ENTRY_FREE	src/memory/heap/heap.h	/^#define HEAP_BLOCK_TABLE_ENTRY_FREE /;"	d	language:C++
HEAP_BLOCK_TABLE_ENTRY_TAKEN	src/memory/heap/heap.h	/^#define HEAP_BLOCK_TABLE_ENTRY_TAKEN /;"	d	language:C++
Heap	README.md	/^## Heap$/;"	s	language:Markdown
HiddenSectors	src/boot/boot.asm	/^HiddenSectors dd 0x00$/;"	d	language:Asm
INCLUDES	Makefile	/^INCLUDES = -I.\/src$/;"	m	language:Make
Implementation	README.md	/^### Implementation$/;"	S	language:Markdown
Interrputs	README.md	/^## Interrputs$/;"	s	language:Markdown
Interrputs Table	README.md	/^### Interrputs Table$/;"	S	language:Markdown
Interrupt Descriptor Table	README.md	/^##  Interrupt Descriptor Table$/;"	s	language:Markdown
KERNEL_CODE_SELECTOR	src/config.h	/^#define KERNEL_CODE_SELECTOR /;"	d	language:C++
KERNEL_DATA_SELECTOR	src/config.h	/^#define KERNEL_DATA_SELECTOR /;"	d	language:C++
MediaType	src/boot/boot.asm	/^MediaType db 0xF8$/;"	d	language:Asm
Memory schemes	README.md	/^### Memory schemes$/;"	S	language:Markdown
Multiple segments are available through the use of segment registers	README.md	/^#### Multiple segments are available through the use of segment registers$/;"	t	language:Markdown
NumSectors	src/boot/boot.asm	/^NumSectors dw 0x00           ; ignored$/;"	d	language:Asm
NumberOfHeads	src/boot/boot.asm	/^NumberOfHeads dw 0x40$/;"	d	language:Asm
OEMIdentifier	src/boot/boot.asm	/^OEMIdentifier db 'RAOS    '  ; 8 bytes$/;"	d	language:Asm
ORG	src/boot/boot.asm	/^ORG 0x7c00$/;"	l	language:Asm
ORG	src/boot/boot_before_FAT16.asm	/^ORG 0x7c00$/;"	l	language:Asm
ORG	src/boot/boot_before_protected.asm	/^ORG 0$/;"	l	language:Asm
PAGING_ACCESS_FROM_ALL	src/memory/paging/paging.h	/^#define PAGING_ACCESS_FROM_ALL /;"	d	language:C++
PAGING_CACHE_DISABLED	src/memory/paging/paging.h	/^#define PAGING_CACHE_DISABLED /;"	d	language:C++
PAGING_IS_PRESENT	src/memory/paging/paging.h	/^#define PAGING_IS_PRESENT /;"	d	language:C++
PAGING_IS_WRITABLE	src/memory/paging/paging.h	/^#define PAGING_IS_WRITABLE /;"	d	language:C++
PAGING_PAGE_SIZE	src/memory/paging/paging.h	/^#define PAGING_PAGE_SIZE /;"	d	language:C++
PAGING_TOTAL_ENTRIES_PER_TABLE	src/memory/paging/paging.h	/^#define PAGING_TOTAL_ENTRIES_PER_TABLE /;"	d	language:C++
PAGING_WRITE_THROUGH	src/memory/paging/paging.h	/^#define PAGING_WRITE_THROUGH /;"	d	language:C++
PCI IDE controller	README.md	/^### PCI IDE controller$/;"	S	language:Markdown
Page Fault Exception	README.md	/^### Page Fault Exception$/;"	S	language:Markdown
Page Table Entry Structure	README.md	/^### Page Table Entry Structure$/;"	S	language:Markdown
Paging	README.md	/^## Paging$/;"	s	language:Markdown
Paging	README.md	/^#### Paging$/;"	t	language:Markdown
Programmable Interrupt Controller	README.md	/^## Programmable Interrupt Controller$/;"	s	language:Markdown
Programs can be loaded in different areas of memory without problems	README.md	/^#### Programs can be loaded in different areas of memory without problems$/;"	t	language:Markdown
Protected Mode	README.md	/^## Protected Mode$/;"	s	language:Markdown
RAOS_ALL_OK	src/status.h	/^#define RAOS_ALL_OK /;"	d	language:C++
RAOS_DISK_TYPE	src/disk/disk.h	/^typedef unsigned int RAOS_DISK_TYPE;$/;"	t	language:C++	typeref:typename:unsigned int
RAOS_DISK_TYPE_REAL	src/disk/disk.h	/^#define RAOS_DISK_TYPE_REAL /;"	d	language:C++
RAOS_FAT16_BAD_SECTOR	src/fs/fat/fat16.c	/^#define RAOS_FAT16_BAD_SECTOR /;"	d	language:C	file:
RAOS_FAT16_ENTRY_SIZE	src/fs/fat/fat16.c	/^#define RAOS_FAT16_ENTRY_SIZE /;"	d	language:C	file:
RAOS_FAT16_SIGNATURE	src/fs/fat/fat16.c	/^#define RAOS_FAT16_SIGNATURE /;"	d	language:C	file:
RAOS_FAT16_UNUSED	src/fs/fat/fat16.c	/^#define RAOS_FAT16_UNUSED /;"	d	language:C	file:
RAOS_HEAP_ADDRESS	src/config.h	/^#define RAOS_HEAP_ADDRESS /;"	d	language:C++
RAOS_HEAP_BLOCK_SIZE	src/config.h	/^#define RAOS_HEAP_BLOCK_SIZE /;"	d	language:C++
RAOS_HEAP_SIZE_BYTES	src/config.h	/^#define RAOS_HEAP_SIZE_BYTES /;"	d	language:C++
RAOS_HEAP_TABLE_ADDRESS	src/config.h	/^#define RAOS_HEAP_TABLE_ADDRESS /;"	d	language:C++
RAOS_MAX_FILESYSTEMS	src/config.h	/^#define RAOS_MAX_FILESYSTEMS /;"	d	language:C++
RAOS_MAX_FILE_DESCRIPTORS	src/config.h	/^#define RAOS_MAX_FILE_DESCRIPTORS /;"	d	language:C++
RAOS_MAX_PATH	src/kernel.h	/^#define RAOS_MAX_PATH /;"	d	language:C++
RAOS_SECTOR_SIZE	src/config.h	/^#define RAOS_SECTOR_SIZE /;"	d	language:C++
RAOS_TOTAL_INTERRUPTS	src/config.h	/^#define RAOS_TOTAL_INTERRUPTS /;"	d	language:C++
Read From Hard Disk	README.md	/^## Read From Hard Disk$/;"	s	language:Markdown
Real Mode	README.md	/^## Real Mode$/;"	s	language:Markdown
Reference	README.md	/^## Reference$/;"	s	language:Markdown
ReservedSectors	src/boot/boot.asm	/^ReservedSectors dw 200       ; will save the entire kernel$/;"	d	language:Asm
RootDirEntries	src/boot/boot.asm	/^RootDirEntries dw 0x40$/;"	d	language:Asm
SEEK_CUR	src/fs/file.h	/^    SEEK_CUR,$/;"	e	language:C++	enum:__anond486e55a0103
SEEK_END	src/fs/file.h	/^    SEEK_END$/;"	e	language:C++	enum:__anond486e55a0103
SEEK_SET	src/fs/file.h	/^    SEEK_SET,$/;"	e	language:C++	enum:__anond486e55a0103
SectorsBig	src/boot/boot.asm	/^SectorsBig dd 0x773594$/;"	d	language:Asm
SectorsPerCluster	src/boot/boot.asm	/^SectorsPerCluster db 0x80$/;"	d	language:Asm
SectorsPerFat	src/boot/boot.asm	/^SectorsPerFat dw 0x100$/;"	d	language:Asm
SectorsPerTrack	src/boot/boot.asm	/^SectorsPerTrack dw 0x20$/;"	d	language:Asm
Segmentation memory model	README.md	/^### Segmentation memory model$/;"	S	language:Markdown
Selectors	README.md	/^#### Selectors$/;"	t	language:Markdown
Signature	src/boot/boot.asm	/^Signature db 0x29$/;"	d	language:Asm
SystemIDString	src/boot/boot.asm	/^SystemIDString db 'FAT16   '$/;"	d	language:Asm
Text Mode	README.md	/^## Text Mode$/;"	s	language:Markdown
The first step of bootloader	README.md	/^### The first step of bootloader$/;"	S	language:Markdown
VFS	README.md	/^## VFS$/;"	s	language:Markdown
VGA_HEIGHT	src/kernel.h	/^#define VGA_HEIGHT /;"	d	language:C++
VGA_WIDTH	src/kernel.h	/^#define VGA_WIDTH /;"	d	language:C++
VolumeID	src/boot/boot.asm	/^VolumeID dd 0xD105$/;"	d	language:Asm
VolumeIDString	src/boot/boot.asm	/^VolumeIDString db 'RAOS BOOT  '  ; 11 bytes$/;"	d	language:Asm
WinNTBit	src/boot/boot.asm	/^WinNTBit db 0x00$/;"	d	language:Asm
_CONFIG_H	src/config.h	/^#define _CONFIG_H$/;"	d	language:C++
_DISK_H	src/disk/disk.h	/^#define _DISK_H$/;"	d	language:C++
_DISK_STREAMER_H	src/disk/streamer.h	/^#define _DISK_STREAMER_H$/;"	d	language:C++
_FILE_H	src/fs/file.h	/^#define _FILE_H$/;"	d	language:C++
_HEAP_H	src/memory/heap/heap.h	/^#define _HEAP_H$/;"	d	language:C++
_IDT_H	src/idt/idt.h	/^#define _IDT_H$/;"	d	language:C++
_IO_H	src/io/io.h	/^#define _IO_H$/;"	d	language:C++
_KERNEL_H	src/kernel.h	/^#define _KERNEL_H$/;"	d	language:C++
_KHEAP_H	src/memory/heap/kheap.h	/^#define _KHEAP_H$/;"	d	language:C++
_MEMORY_H	src/memory/memory.h	/^#define _MEMORY_H$/;"	d	language:C++
_PAGING_H	src/memory/paging/paging.h	/^#define _PAGING_H$/;"	d	language:C++
_PPARSER_H	src/fs/pparser.h	/^#define _PPARSER_H$/;"	d	language:C++
_STATUS_H	src/status.h	/^#define _STATUS_H$/;"	d	language:C++
_STRING_H	src/string/string.h	/^#define _STRING_H$/;"	d	language:C++
__FAT16_H	src/fs/fat/fat16.h	/^#define __FAT16_H$/;"	d	language:C++
__anon13f27801010a	src/fs/fat/fat16.c	/^    union {$/;"	u	language:C	struct:fat_item	file:
__anond486e55a0103	src/fs/file.h	/^enum {$/;"	g	language:C++
__anond486e55a0203	src/fs/file.h	/^enum {$/;"	g	language:C++
_start	src/boot/boot_before_FAT16.asm	/^_start:$/;"	l	language:Asm
_start	src/boot/boot_before_protected.asm	/^_start:$/;"	l	language:Asm
_start	src/kernel.asm	/^_start:$/;"	l	language:Asm
all	Makefile	/^all: .\/bin\/boot.bin .\/bin\/kernel.bin$/;"	t	language:Make
ata_lba_read	src/boot/boot.asm	/^ata_lba_read:$/;"	l	language:Asm
ata_lba_read	src/boot/boot_before_FAT16.asm	/^ata_lba_read:$/;"	l	language:Asm
attribute	src/fs/fat/fat16.c	/^    uint8_t attribute;  \/\/ FAT directory entry attributes bitmasks$/;"	m	language:C	struct:fat_directory_item	typeref:typename:uint8_t	file:
base	src/idt/idt.h	/^    uint32_t base;   \/\/ the address of IDT$/;"	m	language:C++	struct:idtr_desc	typeref:typename:uint32_t
before_protected_mode	Makefile	/^before_protected_mode:$/;"	t	language:Make
buffer	src/boot/boot_before_protected.asm	/^buffer:/;"	l	language:Asm
bytes_per_sector	src/fs/fat/fat16.c	/^    uint16_t bytes_per_sector;$/;"	m	language:C	struct:fat_header	typeref:typename:uint16_t	file:
check bin	README.md	/^# check bin$/;"	c	language:Markdown
chtoi	src/string/string.c	/^int chtoi(char c) {$/;"	f	language:C	typeref:typename:int	signature:(char c)
clean	Makefile	/^clean:$/;"	t	language:Make
cluster_read_stream	src/fs/fat/fat16.c	/^    struct disk_stream* cluster_read_stream;  \/\/ data cluster$/;"	m	language:C	struct:fat_private	typeref:struct:disk_stream *	file:
creation_date	src/fs/fat/fat16.c	/^    uint16_t creation_date;$/;"	m	language:C	struct:fat_directory_item	typeref:typename:uint16_t	file:
creation_time	src/fs/fat/fat16.c	/^    uint16_t creation_time;$/;"	m	language:C	struct:fat_directory_item	typeref:typename:uint16_t	file:
creation_time_tenths_of_a_sec	src/fs/fat/fat16.c	/^    uint8_t creation_time_tenths_of_a_sec;$/;"	m	language:C	struct:fat_directory_item	typeref:typename:uint8_t	file:
current_directory	src/memory/paging/paging.c	/^static uint32_t *current_directory = 0;$/;"	v	language:C	typeref:typename:uint32_t *	file:
directory	src/fs/fat/fat16.c	/^        struct fat_directory* directory;$/;"	m	language:C	union:fat_item::__anon13f27801010a	typeref:struct:fat_directory *	file:
directory_entry	src/memory/paging/paging.h	/^  uint32_t *directory_entry;$/;"	m	language:C++	struct:paging_4gb_chunk	typeref:typename:uint32_t *
directory_stream	src/fs/fat/fat16.c	/^    struct disk_stream* directory_stream;     \/\/ directory$/;"	m	language:C	struct:fat_private	typeref:struct:disk_stream *	file:
disable_interrupts	src/idt/idt.asm	/^disable_interrupts:$/;"	l	language:Asm
disk	src/disk/disk.c	/^struct disk disk;$/;"	v	language:C	typeref:struct:disk
disk	src/disk/disk.h	/^struct disk {$/;"	s	language:C++
disk	src/disk/streamer.h	/^    struct disk* disk;$/;"	m	language:C++	struct:disk_stream	typeref:struct:disk *
disk	src/fs/file.h	/^    struct disk* disk;$/;"	m	language:C++	struct:file_descriptor	typeref:struct:disk *
disk_get	src/disk/disk.c	/^struct disk* disk_get(int index) {$/;"	f	language:C	typeref:struct:disk *	signature:(int index)
disk_read_block	src/disk/disk.c	/^int disk_read_block(struct disk* idisk, unsigned int lba, int total,$/;"	f	language:C	typeref:typename:int	signature:(struct disk * idisk,unsigned int lba,int total,void * buf)
disk_read_sector	src/disk/disk.c	/^int disk_read_sector(int lba, int total, void* buf) {$/;"	f	language:C	typeref:typename:int	signature:(int lba,int total,void * buf)
disk_search_and_init	src/disk/disk.c	/^void disk_search_and_init() {$/;"	f	language:C	typeref:typename:void	signature:()
disk_stream	src/disk/streamer.h	/^struct disk_stream {$/;"	s	language:C++
diskstreamer_close	src/disk/streamer.c	/^void diskstreamer_close(struct disk_stream* stream) { kfree(stream); }/;"	f	language:C	typeref:typename:void	signature:(struct disk_stream * stream)
diskstreamer_new	src/disk/streamer.c	/^struct disk_stream* diskstreamer_new(int disk_id) {$/;"	f	language:C	typeref:struct:disk_stream *	signature:(int disk_id)
diskstreamer_read	src/disk/streamer.c	/^int diskstreamer_read(struct disk_stream* stream, void* out, int total) {$/;"	f	language:C	typeref:typename:int	signature:(struct disk_stream * stream,void * out,int total)
diskstreamer_seek	src/disk/streamer.c	/^int diskstreamer_seek(struct disk_stream* stream, int pos) {$/;"	f	language:C	typeref:typename:int	signature:(struct disk_stream * stream,int pos)
done	src/boot/boot_before_protected.asm	/^.done:$/;"	l	language:Asm
drive_no	src/fs/pparser.h	/^    int               drive_no;$/;"	m	language:C++	struct:path_root	typeref:typename:int
drive_number	src/fs/fat/fat16.c	/^    uint8_t drive_number;$/;"	m	language:C	struct:fat_header_extended	typeref:typename:uint8_t	file:
dw	src/boot/boot.asm	/^dw 0xAA55$/;"	l	language:Asm
dw	src/boot/boot_before_FAT16.asm	/^dw 0xAA55$/;"	l	language:Asm
dw	src/boot/boot_before_protected.asm	/^dw 0xAA55$/;"	l	language:Asm
enable_interrupts	src/idt/idt.asm	/^enable_interrupts:$/;"	l	language:Asm
enable_paging	src/memory/paging/paging.asm	/^enable_paging:$/;"	l	language:Asm
end_sector_pos	src/fs/fat/fat16.c	/^    int32_t end_sector_pos;$/;"	m	language:C	struct:fat_directory	typeref:typename:int32_t	file:
entries	src/memory/heap/heap.h	/^    HEAP_BLOCK_TABLE_ENTRY* entries;$/;"	m	language:C++	struct:heap_table	typeref:typename:HEAP_BLOCK_TABLE_ENTRY *
error	src/boot/boot_before_protected.asm	/^error:$/;"	l	language:Asm
error_message	src/boot/boot_before_protected.asm	/^error_message: db 'Fail to load sectors.', 0$/;"	d	language:Asm
ext	src/fs/fat/fat16.c	/^    uint8_t ext[3];$/;"	m	language:C	struct:fat_directory_item	typeref:typename:uint8_t[3]	file:
extended_header	src/fs/fat/fat16.c	/^        struct fat_header_extended extended_header;$/;"	m	language:C	union:fat_h::fat_h_e	typeref:struct:fat_header_extended	file:
extern	src/idt/idt.asm	/^extern int21h_handler$/;"	l	language:Asm
extern	src/idt/idt.asm	/^extern no_interrupt_handler$/;"	l	language:Asm
extern	src/kernel.asm	/^extern kernel_main$/;"	l	language:Asm
fat16_fs	src/fs/fat/fat16.c	/^struct filesystem fat16_fs = {$/;"	v	language:C	typeref:struct:filesystem
fat16_init	src/fs/fat/fat16.c	/^struct filesystem* fat16_init() {$/;"	f	language:C	typeref:struct:filesystem *	signature:()
fat16_open	src/fs/fat/fat16.c	/^void* fat16_open(struct disk* disk, struct path_part* path, FILE_MODE mode) {$/;"	f	language:C	typeref:typename:void *	signature:(struct disk * disk,struct path_part * path,FILE_MODE mode)
fat16_resolve	src/fs/fat/fat16.c	/^int fat16_resolve(struct disk* disk) {$/;"	f	language:C	typeref:typename:int	signature:(struct disk * disk)
fat_copies	src/fs/fat/fat16.c	/^    uint8_t fat_copies;$/;"	m	language:C	struct:fat_header	typeref:typename:uint8_t	file:
fat_directory	src/fs/fat/fat16.c	/^struct fat_directory {$/;"	s	language:C	file:
fat_directory_item	src/fs/fat/fat16.c	/^struct fat_directory_item {$/;"	s	language:C	file:
fat_h	src/fs/fat/fat16.c	/^struct fat_h {$/;"	s	language:C	file:
fat_h_e	src/fs/fat/fat16.c	/^    union fat_h_e {$/;"	u	language:C	struct:fat_h	file:
fat_header	src/fs/fat/fat16.c	/^struct fat_header {$/;"	s	language:C	file:
fat_header_extended	src/fs/fat/fat16.c	/^struct fat_header_extended {$/;"	s	language:C	file:
fat_item	src/fs/fat/fat16.c	/^struct fat_item {$/;"	s	language:C	file:
fat_item_descriptor	src/fs/fat/fat16.c	/^struct fat_item_descriptor {$/;"	s	language:C	file:
fat_private	src/fs/fat/fat16.c	/^struct fat_private {$/;"	s	language:C	file:
fat_read_stream	src/fs/fat/fat16.c	/^    struct disk_stream* fat_read_stream;      \/\/ file allocation table$/;"	m	language:C	struct:fat_private	typeref:struct:disk_stream *	file:
file_descriptor	src/fs/file.h	/^struct file_descriptor {$/;"	s	language:C++
file_get_descriptor	src/fs/file.c	/^static struct file_descriptor* file_get_descriptor(int fd) {$/;"	f	language:C	typeref:struct:file_descriptor *	file:	signature:(int fd)
file_new_descriptor	src/fs/file.c	/^static int file_new_descriptor(struct file_descriptor** desc_out) {$/;"	f	language:C	typeref:typename:int	file:	signature:(struct file_descriptor ** desc_out)
filedescriptors	src/fs/file.c	/^struct file_descriptor* filedescriptors[RAOS_MAX_FILE_DESCRIPTORS];$/;"	v	language:C	typeref:struct:file_descriptor * []
filename	src/fs/fat/fat16.c	/^    uint8_t filename[8];$/;"	m	language:C	struct:fat_directory_item	typeref:typename:uint8_t[8]	file:
filesize	src/fs/fat/fat16.c	/^    uint32_t filesize;$/;"	m	language:C	struct:fat_directory_item	typeref:typename:uint32_t	file:
filesystem	src/disk/disk.h	/^    struct filesystem* filesystem;$/;"	m	language:C++	struct:disk	typeref:struct:filesystem *
filesystem	src/fs/file.h	/^    struct filesystem* filesystem;$/;"	m	language:C++	struct:file_descriptor	typeref:struct:filesystem *
filesystem	src/fs/file.h	/^struct filesystem {$/;"	s	language:C++
filesystems	src/fs/file.c	/^struct filesystem* filesystems[RAOS_MAX_FILESYSTEMS];$/;"	v	language:C	typeref:struct:filesystem * []
first	src/fs/pparser.h	/^    struct path_part* first;$/;"	m	language:C++	struct:path_root	typeref:struct:path_part *
fopen	src/fs/file.c	/^int fopen(const char *filename, const char *mode) {$/;"	f	language:C	typeref:typename:int	signature:(const char * filename,const char * mode)
fs_get_free_filesystem	src/fs/file.c	/^static struct filesystem** fs_get_free_filesystem() {$/;"	f	language:C	typeref:struct:filesystem **	file:	signature:()
fs_init	src/fs/file.c	/^void fs_init() {$/;"	f	language:C	typeref:typename:void	signature:()
fs_insert_filesystem	src/fs/file.c	/^void fs_insert_filesystem(struct filesystem *filesystem) {$/;"	f	language:C	typeref:typename:void	signature:(struct filesystem * filesystem)
fs_load	src/fs/file.c	/^void fs_load() {$/;"	f	language:C	typeref:typename:void	signature:()
fs_resolve	src/fs/file.c	/^struct filesystem* fs_resolve(struct disk* disk) {$/;"	f	language:C	typeref:struct:filesystem *	signature:(struct disk * disk)
fs_static_load	src/fs/file.c	/^static void fs_static_load() {$/;"	f	language:C	typeref:typename:void	file:	signature:()
gdt_code	src/boot/boot.asm	/^gdt_code:         ; CS should point to this$/;"	l	language:Asm
gdt_code	src/boot/boot_before_FAT16.asm	/^gdt_code:         ; CS should point to this$/;"	l	language:Asm
gdt_data	src/boot/boot.asm	/^gdt_data:         ; DS, SS, ES, FS, GS$/;"	l	language:Asm
gdt_data	src/boot/boot_before_FAT16.asm	/^gdt_data:         ; DS, SS, ES, FS, GS$/;"	l	language:Asm
gdt_descriptor	src/boot/boot.asm	/^gdt_descriptor:$/;"	l	language:Asm
gdt_descriptor	src/boot/boot_before_FAT16.asm	/^gdt_descriptor:$/;"	l	language:Asm
gdt_end	src/boot/boot.asm	/^gdt_end:$/;"	l	language:Asm
gdt_end	src/boot/boot_before_FAT16.asm	/^gdt_end:$/;"	l	language:Asm
gdt_null	src/boot/boot.asm	/^gdt_null:$/;"	l	language:Asm
gdt_null	src/boot/boot_before_FAT16.asm	/^gdt_null:$/;"	l	language:Asm
gdt_start	src/boot/boot.asm	/^gdt_start:$/;"	l	language:Asm
gdt_start	src/boot/boot_before_FAT16.asm	/^gdt_start:$/;"	l	language:Asm
global	src/idt/idt.asm	/^global disable_interrupts$/;"	l	language:Asm
global	src/idt/idt.asm	/^global enable_interrupts$/;"	l	language:Asm
global	src/idt/idt.asm	/^global idt_load$/;"	l	language:Asm
global	src/idt/idt.asm	/^global int21h$/;"	l	language:Asm
global	src/idt/idt.asm	/^global no_interrupt$/;"	l	language:Asm
global	src/io/io.asm	/^global insb$/;"	l	language:Asm
global	src/io/io.asm	/^global insw$/;"	l	language:Asm
global	src/io/io.asm	/^global outb$/;"	l	language:Asm
global	src/io/io.asm	/^global outw$/;"	l	language:Asm
global	src/kernel.asm	/^global _start$/;"	l	language:Asm
global	src/memory/paging/paging.asm	/^global enable_paging$/;"	l	language:Asm
global	src/memory/paging/paging.asm	/^global paging_load_directory$/;"	l	language:Asm
header	src/fs/fat/fat16.c	/^    struct fat_h header;$/;"	m	language:C	struct:fat_private	typeref:struct:fat_h	file:
heap	src/memory/heap/heap.h	/^struct heap {$/;"	s	language:C++
heap_address_to_block	src/memory/heap/heap.c	/^int heap_address_to_block(struct heap* heap, void* address) {$/;"	f	language:C	typeref:typename:int	signature:(struct heap * heap,void * address)
heap_block_to_address	src/memory/heap/heap.c	/^void* heap_block_to_address(struct heap* heap, int block_idx) {$/;"	f	language:C	typeref:typename:void *	signature:(struct heap * heap,int block_idx)
heap_create	src/memory/heap/heap.c	/^int heap_create(struct heap* heap, void* ptr, void* end,$/;"	f	language:C	typeref:typename:int	signature:(struct heap * heap,void * ptr,void * end,struct heap_table * table)
heap_free	src/memory/heap/heap.c	/^void heap_free(struct heap* heap, void* ptr) {$/;"	f	language:C	typeref:typename:void	signature:(struct heap * heap,void * ptr)
heap_get_entry_type	src/memory/heap/heap.c	/^static uint8_t heap_get_entry_type(HEAP_BLOCK_TABLE_ENTRY entry) {$/;"	f	language:C	typeref:typename:uint8_t	file:	signature:(HEAP_BLOCK_TABLE_ENTRY entry)
heap_get_start_block	src/memory/heap/heap.c	/^int heap_get_start_block(struct heap* heap, uint32_t total_blocks) {$/;"	f	language:C	typeref:typename:int	signature:(struct heap * heap,uint32_t total_blocks)
heap_malloc	src/memory/heap/heap.c	/^void* heap_malloc(struct heap* heap, size_t size) {$/;"	f	language:C	typeref:typename:void *	signature:(struct heap * heap,size_t size)
heap_malloc_blocks	src/memory/heap/heap.c	/^void* heap_malloc_blocks(struct heap* heap, uint32_t total_blocks) {$/;"	f	language:C	typeref:typename:void *	signature:(struct heap * heap,uint32_t total_blocks)
heap_mark_block_free	src/memory/heap/heap.c	/^void heap_mark_block_free(struct heap* heap, int start_block) {$/;"	f	language:C	typeref:typename:void	signature:(struct heap * heap,int start_block)
heap_mark_blocks_taken	src/memory/heap/heap.c	/^void heap_mark_blocks_taken(struct heap* heap, int start_block,$/;"	f	language:C	typeref:typename:void	signature:(struct heap * heap,int start_block,int total_block)
heap_round_value_to_upper	src/memory/heap/heap.c	/^static uint32_t heap_round_value_to_upper(uint32_t val) {$/;"	f	language:C	typeref:typename:uint32_t	file:	signature:(uint32_t val)
heap_table	src/memory/heap/heap.h	/^struct heap_table {$/;"	s	language:C++
heap_validate_alignment	src/memory/heap/heap.c	/^static int heap_validate_alignment(void* ptr) {$/;"	f	language:C	typeref:typename:int	file:	signature:(void * ptr)
heap_validate_table	src/memory/heap/heap.c	/^static int heap_validate_table(void* ptr, void* end, struct heap_table* table) {$/;"	f	language:C	typeref:typename:int	file:	signature:(void * ptr,void * end,struct heap_table * table)
hidden_sectors	src/fs/fat/fat16.c	/^    uint32_t hidden_sectors;$/;"	m	language:C	struct:fat_header	typeref:typename:uint32_t	file:
high_16_bits_first_cluster	src/fs/fat/fat16.c	/^    uint16_t high_16_bits_first_cluster;  \/\/ subdirectory addr or data of files$/;"	m	language:C	struct:fat_directory_item	typeref:typename:uint16_t	file:
idt_desc	src/idt/idt.h	/^struct idt_desc {$/;"	s	language:C++
idt_descriptors	src/idt/idt.c	/^struct idt_desc  idt_descriptors[RAOS_TOTAL_INTERRUPTS];$/;"	v	language:C	typeref:struct:idt_desc[]
idt_init	src/idt/idt.c	/^void idt_init() {$/;"	f	language:C	typeref:typename:void	signature:()
idt_load	src/idt/idt.asm	/^idt_load:$/;"	l	language:Asm
idt_set	src/idt/idt.c	/^void idt_set(int interrupt_no, void* address) {$/;"	f	language:C	typeref:typename:void	signature:(int interrupt_no,void * address)
idtr_desc	src/idt/idt.h	/^struct idtr_desc {$/;"	s	language:C++
idtr_descriptors	src/idt/idt.c	/^struct idtr_desc idtr_descriptors;$/;"	v	language:C	typeref:struct:idtr_desc
index	src/fs/file.h	/^    int index;$/;"	m	language:C++	struct:file_descriptor	typeref:typename:int
insb	src/io/io.asm	/^insb:$/;"	l	language:Asm
insw	src/io/io.asm	/^insw:$/;"	l	language:Asm
int21h	src/idt/idt.asm	/^int21h:$/;"	l	language:Asm
int21h_handler	src/idt/idt.c	/^void int21h_handler() {$/;"	f	language:C	typeref:typename:void	signature:()
isdigit	src/string/string.c	/^bool isdigit(char c) {$/;"	f	language:C	typeref:typename:bool	signature:(char c)
item	src/fs/fat/fat16.c	/^        struct fat_directory_item* item;$/;"	m	language:C	union:fat_item::__anon13f27801010a	typeref:struct:fat_directory_item *	file:
item	src/fs/fat/fat16.c	/^    struct fat_directory_item* item;$/;"	m	language:C	struct:fat_directory	typeref:struct:fat_directory_item *	file:
item	src/fs/fat/fat16.c	/^    struct fat_item* item;$/;"	m	language:C	struct:fat_item_descriptor	typeref:struct:fat_item *	file:
jmp	src/boot/boot.asm	/^jmp short start$/;"	l	language:Asm
kernel_chunk	src/kernel.c	/^static struct paging_4gb_chunk* kernel_chunk = NULL;$/;"	v	language:C	typeref:struct:paging_4gb_chunk *	file:
kernel_heap	src/memory/heap/kheap.c	/^struct heap       kernel_heap;$/;"	v	language:C	typeref:struct:heap
kernel_heap_table	src/memory/heap/kheap.c	/^struct heap_table kernel_heap_table;$/;"	v	language:C	typeref:struct:heap_table
kernel_main	src/kernel.c	/^void kernel_main() {$/;"	f	language:C	typeref:typename:void	signature:()
kfree	src/memory/heap/kheap.c	/^void kfree(void* ptr) { heap_free(&kernel_heap, ptr); }$/;"	f	language:C	typeref:typename:void	signature:(void * ptr)
kheap_init	src/memory/heap/kheap.c	/^void kheap_init() {$/;"	f	language:C	typeref:typename:void	signature:()
kmalloc	src/memory/heap/kheap.c	/^void* kmalloc(size_t size) { return heap_malloc(&kernel_heap, size); }$/;"	f	language:C	typeref:typename:void *	signature:(size_t size)
kzalloc	src/memory/heap/kheap.c	/^void* kzalloc(size_t size) {$/;"	f	language:C	typeref:typename:void *	signature:(size_t size)
last_access	src/fs/fat/fat16.c	/^    uint16_t last_access;$/;"	m	language:C	struct:fat_directory_item	typeref:typename:uint16_t	file:
last_mod_date	src/fs/fat/fat16.c	/^    uint16_t last_mod_date;$/;"	m	language:C	struct:fat_directory_item	typeref:typename:uint16_t	file:
last_mod_time	src/fs/fat/fat16.c	/^    uint16_t last_mod_time;$/;"	m	language:C	struct:fat_directory_item	typeref:typename:uint16_t	file:
limit	src/idt/idt.h	/^    uint16_t limit;  \/\/ the length of the IDT minus one$/;"	m	language:C++	struct:idtr_desc	typeref:typename:uint16_t
load32	src/boot/boot.asm	/^load32:$/;"	l	language:Asm
load32	src/boot/boot_before_FAT16.asm	/^load32:$/;"	l	language:Asm
load_protected	src/boot/boot.asm	/^.load_protected:$/;"	l	language:Asm
load_protected	src/boot/boot_before_FAT16.asm	/^.load_protected:$/;"	l	language:Asm
loop	src/boot/boot_before_protected.asm	/^.loop:$/;"	l	language:Asm
low_16_bits_first_cluster	src/fs/fat/fat16.c	/^    uint16_t low_16_bits_first_cluster;$/;"	m	language:C	struct:fat_directory_item	typeref:typename:uint16_t	file:
media_type	src/fs/fat/fat16.c	/^    uint8_t media_type;$/;"	m	language:C	struct:fat_header	typeref:typename:uint8_t	file:
memcmp	src/memory/memory.c	/^int memcmp(void* s1, void*s2, int count) {$/;"	f	language:C	typeref:typename:int	signature:(void * s1,void * s2,int count)
memset	src/memory/memory.c	/^void* memset(void *ptr, char c, size_t size) {$/;"	f	language:C	typeref:typename:void *	signature:(void * ptr,char c,size_t size)
mov	src/boot/boot.asm	/^    mov ds, ax     ; Data Segment$/;"	d	language:Asm
mov	src/boot/boot.asm	/^    mov dx, 0x1F0        ; set the port to read$/;"	d	language:Asm
mov	src/boot/boot.asm	/^    mov dx, 0x1F2$/;"	d	language:Asm
mov	src/boot/boot.asm	/^    mov dx, 0x1F3        ; write it to port 0x1F3$/;"	d	language:Asm
mov	src/boot/boot.asm	/^    mov dx, 0x1F4$/;"	d	language:Asm
mov	src/boot/boot.asm	/^    mov dx, 0x1F5$/;"	d	language:Asm
mov	src/boot/boot.asm	/^    mov dx, 0x1F6       ; write the highest 8 bits to port 0x1F6$/;"	d	language:Asm
mov	src/boot/boot.asm	/^    mov dx, 0x1F7        ; set the port to read$/;"	d	language:Asm
mov	src/boot/boot.asm	/^    mov dx, 0x1F7        ; set the status$/;"	d	language:Asm
mov	src/boot/boot_before_FAT16.asm	/^    mov ds, ax     ; Data Segment$/;"	d	language:Asm
mov	src/boot/boot_before_FAT16.asm	/^    mov dx, 0x1F0        ; set the port to read$/;"	d	language:Asm
mov	src/boot/boot_before_FAT16.asm	/^    mov dx, 0x1F2$/;"	d	language:Asm
mov	src/boot/boot_before_FAT16.asm	/^    mov dx, 0x1F3        ; write it to port 0x1F3$/;"	d	language:Asm
mov	src/boot/boot_before_FAT16.asm	/^    mov dx, 0x1F4$/;"	d	language:Asm
mov	src/boot/boot_before_FAT16.asm	/^    mov dx, 0x1F5$/;"	d	language:Asm
mov	src/boot/boot_before_FAT16.asm	/^    mov dx, 0x1F6       ; write the highest 8 bits to port 0x1F6$/;"	d	language:Asm
mov	src/boot/boot_before_FAT16.asm	/^    mov dx, 0x1F7        ; set the port to read$/;"	d	language:Asm
mov	src/boot/boot_before_FAT16.asm	/^    mov dx, 0x1F7        ; set the status$/;"	d	language:Asm
mov	src/boot/boot_before_protected.asm	/^    mov dh, 0  ; head number$/;"	d	language:Asm
mov	src/boot/boot_before_protected.asm	/^    mov ds, ax     ; Data Segment$/;"	d	language:Asm
mov	src/kernel.asm	/^    mov ds, ax$/;"	d	language:Asm
name	src/fs/file.h	/^    char name[20];$/;"	m	language:C++	struct:filesystem	typeref:typename:char[20]
next	src/fs/pparser.h	/^    struct path_part* next;$/;"	m	language:C++	struct:path_part	typeref:struct:path_part *
next_sector	src/boot/boot.asm	/^.next_sector:$/;"	l	language:Asm
next_sector	src/boot/boot_before_FAT16.asm	/^.next_sector:$/;"	l	language:Asm
no_interrupt	src/idt/idt.asm	/^no_interrupt:$/;"	l	language:Asm
no_interrupt_handler	src/idt/idt.c	/^void no_interrupt_handler() {$/;"	f	language:C	typeref:typename:void	signature:()
nop	src/boot/boot.asm	/^nop$/;"	l	language:Asm
number_of_heads	src/fs/fat/fat16.c	/^    uint16_t number_of_heads;$/;"	m	language:C	struct:fat_header	typeref:typename:uint16_t	file:
number_of_sectors	src/fs/fat/fat16.c	/^    uint16_t number_of_sectors;$/;"	m	language:C	struct:fat_header	typeref:typename:uint16_t	file:
oem_indentifier	src/fs/fat/fat16.c	/^    uint8_t oem_indentifier[8];$/;"	m	language:C	struct:fat_header	typeref:typename:uint8_t[8]	file:
offset_1	src/idt/idt.h	/^    uint16_t offset_1;      \/\/ offset bits 0..15$/;"	m	language:C++	struct:idt_desc	typeref:typename:uint16_t
offset_2	src/idt/idt.h	/^    uint16_t offset_2;      \/\/ offset bits 16..31$/;"	m	language:C++	struct:idt_desc	typeref:typename:uint16_t
open	src/fs/file.h	/^    FS_OPEN_FUNCTION open;$/;"	m	language:C++	struct:filesystem	typeref:typename:FS_OPEN_FUNCTION
out	src/boot/boot.asm	/^    out dx, al          ; out, communicate to the bus$/;"	d	language:Asm
out	src/boot/boot.asm	/^    out dx, al$/;"	d	language:Asm
out	src/boot/boot_before_FAT16.asm	/^    out dx, al          ; out, communicate to the bus$/;"	d	language:Asm
out	src/boot/boot_before_FAT16.asm	/^    out dx, al$/;"	d	language:Asm
out	src/io/io.asm	/^    out dx, al          ; Output byte in AL to I\/O port address in DX$/;"	d	language:Asm
out	src/io/io.asm	/^    out dx, ax          ; Output word in AX to I\/O port address in DX$/;"	d	language:Asm
outb	src/io/io.asm	/^outb:$/;"	l	language:Asm
outw	src/io/io.asm	/^outw:$/;"	l	language:Asm
paging_4gb_chunk	src/memory/paging/paging.h	/^struct paging_4gb_chunk {$/;"	s	language:C++
paging_4gb_chunk_get_directory	src/memory/paging/paging.c	/^uint32_t *paging_4gb_chunk_get_directory(struct paging_4gb_chunk *chunk) {$/;"	f	language:C	typeref:typename:uint32_t *	signature:(struct paging_4gb_chunk * chunk)
paging_get_index	src/memory/paging/paging.c	/^int paging_get_index(void *virtual_address, uint32_t *directory_idx_out,$/;"	f	language:C	typeref:typename:int	signature:(void * virtual_address,uint32_t * directory_idx_out,uint32_t * table_idx_out)
paging_is_aligned	src/memory/paging/paging.c	/^bool paging_is_aligned(void *addr) {$/;"	f	language:C	typeref:typename:bool	signature:(void * addr)
paging_load_directory	src/memory/paging/paging.asm	/^paging_load_directory:$/;"	l	language:Asm
paging_new_4gb	src/memory/paging/paging.c	/^struct paging_4gb_chunk *paging_new_4gb(uint8_t flags) {$/;"	f	language:C	typeref:struct:paging_4gb_chunk *	signature:(uint8_t flags)
paging_set	src/memory/paging/paging.c	/^int paging_set(uint32_t* directory, void* virt, uint32_t physic) {$/;"	f	language:C	typeref:typename:int	signature:(uint32_t * directory,void * virt,uint32_t physic)
paging_switch	src/memory/paging/paging.c	/^void paging_switch(uint32_t *directory) {$/;"	f	language:C	typeref:typename:void	signature:(uint32_t * directory)
part	src/fs/pparser.h	/^    const char*       part;$/;"	m	language:C++	struct:path_part	typeref:typename:const char *
path_create_root	src/fs/pparser.c	/^static struct path_root* path_create_root(int driver_no) {$/;"	f	language:C	typeref:struct:path_root *	file:	signature:(int driver_no)
path_free	src/fs/pparser.c	/^void path_free(struct path_root* root) {$/;"	f	language:C	typeref:typename:void	signature:(struct path_root * root)
path_get_drive_by_path	src/fs/pparser.c	/^static int path_get_drive_by_path(const char** path) {$/;"	f	language:C	typeref:typename:int	file:	signature:(const char ** path)
path_get_path_part	src/fs/pparser.c	/^static const char* path_get_path_part(const char** path) {$/;"	f	language:C	typeref:typename:const char *	file:	signature:(const char ** path)
path_parse	src/fs/pparser.c	/^struct path_root* path_parse(const char* path, const char* cur_directory_path) {$/;"	f	language:C	typeref:struct:path_root *	signature:(const char * path,const char * cur_directory_path)
path_parse_path_part	src/fs/pparser.c	/^struct path_part* path_parse_path_part(struct path_part* last_part,$/;"	f	language:C	typeref:struct:path_part *	signature:(struct path_part * last_part,const char ** path)
path_part	src/fs/pparser.h	/^struct path_part {$/;"	s	language:C++
path_root	src/fs/pparser.h	/^struct path_root {$/;"	s	language:C++
path_valid_format	src/fs/pparser.c	/^static int path_valid_format(const char* filename) {$/;"	f	language:C	typeref:typename:int	file:	signature:(const char * filename)
pos	src/disk/streamer.h	/^    int          pos;$/;"	m	language:C++	struct:disk_stream	typeref:typename:int
pos	src/fs/fat/fat16.c	/^    uint32_t pos;$/;"	m	language:C	struct:fat_item_descriptor	typeref:typename:uint32_t	file:
primary_header	src/fs/fat/fat16.c	/^    struct fat_header primary_header;$/;"	m	language:C	struct:fat_h	typeref:struct:fat_header	file:
print	src/boot/boot_before_protected.asm	/^print:$/;"	l	language:Asm
print	src/kernel.c	/^void print(const char* str) {$/;"	f	language:C	typeref:typename:void	signature:(const char * str)
print_char	src/boot/boot_before_protected.asm	/^print_char:$/;"	l	language:Asm
private_	src/fs/file.h	/^    void* private_;$/;"	m	language:C++	struct:file_descriptor	typeref:typename:void *
reserved	src/fs/fat/fat16.c	/^    uint8_t reserved;   \/\/ for furture usage$/;"	m	language:C	struct:fat_directory_item	typeref:typename:uint8_t	file:
reserved_sectors	src/fs/fat/fat16.c	/^    uint16_t reserved_sectors;$/;"	m	language:C	struct:fat_header	typeref:typename:uint16_t	file:
resolve	src/fs/file.h	/^    FS_RESOLVE_FUNCTION resolve;$/;"	m	language:C++	struct:filesystem	typeref:typename:FS_RESOLVE_FUNCTION
root_dir_entries	src/fs/fat/fat16.c	/^    uint16_t root_dir_entries;$/;"	m	language:C	struct:fat_header	typeref:typename:uint16_t	file:
root_directory	src/fs/fat/fat16.c	/^    struct fat_directory root_directory;$/;"	m	language:C	struct:fat_private	typeref:struct:fat_directory	file:
run in qemu	README.md	/^# run in qemu$/;"	c	language:Markdown
saddr	src/memory/heap/heap.h	/^    void* saddr;$/;"	m	language:C++	struct:heap	typeref:typename:void *
sector_pos	src/fs/fat/fat16.c	/^    int32_t sector_pos;$/;"	m	language:C	struct:fat_directory	typeref:typename:int32_t	file:
sector_size	src/disk/disk.h	/^    int            sector_size;$/;"	m	language:C++	struct:disk	typeref:typename:int
sectors_big	src/fs/fat/fat16.c	/^    uint32_t sectors_big;$/;"	m	language:C	struct:fat_header	typeref:typename:uint32_t	file:
sectors_per_cluster	src/fs/fat/fat16.c	/^    uint8_t sectors_per_cluster;$/;"	m	language:C	struct:fat_header	typeref:typename:uint8_t	file:
sectors_per_fat	src/fs/fat/fat16.c	/^    uint16_t sectors_per_fat;$/;"	m	language:C	struct:fat_header	typeref:typename:uint16_t	file:
sectors_per_track	src/fs/fat/fat16.c	/^    uint16_t sectors_per_track;$/;"	m	language:C	struct:fat_header	typeref:typename:uint16_t	file:
selector	src/idt/idt.h	/^    uint16_t selector;      \/\/ a code segment selector in GDT or LDT$/;"	m	language:C++	struct:idt_desc	typeref:typename:uint16_t
shared	src/fs/fat/fat16.c	/^    } shared;  \/\/ optional, could be something else.$/;"	m	language:C	struct:fat_h	typeref:union:fat_h::fat_h_e	file:
short_jmp_inst	src/fs/fat/fat16.c	/^    uint8_t short_jmp_inst[3];  \/\/ boot.asm: short jmp start$/;"	m	language:C	struct:fat_header	typeref:typename:uint8_t[3]	file:
signature	src/fs/fat/fat16.c	/^    uint8_t signature;$/;"	m	language:C	struct:fat_header_extended	typeref:typename:uint8_t	file:
start	src/boot/boot.asm	/^start:$/;"	l	language:Asm
start	src/boot/boot_before_FAT16.asm	/^start:$/;"	l	language:Asm
start	src/boot/boot_before_protected.asm	/^start:$/;"	l	language:Asm
step2	src/boot/boot.asm	/^step2:$/;"	l	language:Asm
step2	src/boot/boot_before_FAT16.asm	/^step2:$/;"	l	language:Asm
step2	src/boot/boot_before_protected.asm	/^step2:$/;"	l	language:Asm
strcpy	src/string/string.c	/^char* strcpy(char *dest, const char* src) {$/;"	f	language:C	typeref:typename:char *	signature:(char * dest,const char * src)
strlen	src/string/string.c	/^size_t strlen(const char* ptr) {$/;"	f	language:C	typeref:typename:size_t	signature:(const char * ptr)
strnlen	src/string/string.c	/^size_t strnlen(const char* ptr, size_t max_len) {$/;"	f	language:C	typeref:typename:size_t	signature:(const char * ptr,size_t max_len)
system_id_string	src/fs/fat/fat16.c	/^    uint8_t system_id_string[8];$/;"	m	language:C	struct:fat_header_extended	typeref:typename:uint8_t[8]	file:
table	src/memory/heap/heap.h	/^    struct heap_table* table;$/;"	m	language:C++	struct:heap	typeref:struct:heap_table *
terminal_col	src/kernel.c	/^uint16_t  terminal_col = 0;$/;"	v	language:C	typeref:typename:uint16_t
terminal_initialize	src/kernel.c	/^void terminal_initialize() {$/;"	f	language:C	typeref:typename:void	signature:()
terminal_make_char	src/kernel.c	/^uint16_t terminal_make_char(char ch, char color) {$/;"	f	language:C	typeref:typename:uint16_t	signature:(char ch,char color)
terminal_putchar	src/kernel.c	/^void terminal_putchar(size_t x, size_t y, char c, char color) {$/;"	f	language:C	typeref:typename:void	signature:(size_t x,size_t y,char c,char color)
terminal_row	src/kernel.c	/^uint16_t  terminal_row = 0;$/;"	v	language:C	typeref:typename:uint16_t
terminal_writechar	src/kernel.c	/^void terminal_writechar(char c, char color) {$/;"	f	language:C	typeref:typename:void	signature:(char c,char color)
times	src/boot/boot.asm	/^times 510-($ - $$) db 0$/;"	l	language:Asm
times	src/boot/boot_before_FAT16.asm	/^times 33 db 0  ; for BIOS parameter block$/;"	l	language:Asm
times	src/boot/boot_before_FAT16.asm	/^times 510-($ - $$) db 0$/;"	l	language:Asm
times	src/boot/boot_before_protected.asm	/^times 33 db 0  ; for BIOS parameter block$/;"	l	language:Asm
times	src/boot/boot_before_protected.asm	/^times 510-($ - $$) db 0$/;"	l	language:Asm
times	src/kernel.asm	/^times 512-($ - $$) db 0   ; alignment to 512 bytes/;"	l	language:Asm
total	src/fs/fat/fat16.c	/^    int32_t total;$/;"	m	language:C	struct:fat_directory	typeref:typename:int32_t	file:
total	src/memory/heap/heap.h	/^    size_t                  total;  \/\/ number of entries$/;"	m	language:C++	struct:heap_table	typeref:typename:size_t
try_again	src/boot/boot.asm	/^.try_again:$/;"	l	language:Asm
try_again	src/boot/boot_before_FAT16.asm	/^.try_again:$/;"	l	language:Asm
type	src/disk/disk.h	/^    RAOS_DISK_TYPE type;$/;"	m	language:C++	struct:disk	typeref:typename:RAOS_DISK_TYPE
type	src/fs/fat/fat16.c	/^    FAT_ITEM_TYPE type;$/;"	m	language:C	struct:fat_item	typeref:typename:FAT_ITEM_TYPE	file:
type_attr	src/idt/idt.h	/^    uint8_t  type_attr;     \/\/ gate type, dpl, and p fields$/;"	m	language:C++	struct:idt_desc	typeref:typename:uint8_t
video_mem	src/kernel.c	/^uint16_t* video_mem    = 0;$/;"	v	language:C	typeref:typename:uint16_t *
volume_id	src/fs/fat/fat16.c	/^    uint32_t volume_id;$/;"	m	language:C	struct:fat_header_extended	typeref:typename:uint32_t	file:
volume_id_string	src/fs/fat/fat16.c	/^    uint8_t volume_id_string[11];$/;"	m	language:C	struct:fat_header_extended	typeref:typename:uint8_t[11]	file:
win_nt_bit	src/fs/fat/fat16.c	/^    uint8_t win_nt_bit;$/;"	m	language:C	struct:fat_header_extended	typeref:typename:uint8_t	file:
zero	src/idt/idt.h	/^    uint8_t  zero;          \/\/ unused, set to 0$/;"	m	language:C++	struct:idt_desc	typeref:typename:uint8_t
