!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
./bin/boot.bin	Makefile	/^.\/bin\/boot.bin: .\/src\/boot\/boot.asm$/;"	t	language:Make
./bin/kernel.bin	Makefile	/^.\/bin\/kernel.bin: $(FILES)$/;"	t	language:Make
./build/idt/idt.asm.o	Makefile	/^.\/build\/idt\/idt.asm.o: .\/src\/idt\/idt.asm$/;"	t	language:Make
./build/idt/idt.o	Makefile	/^.\/build\/idt\/idt.o: .\/src\/idt\/idt.c$/;"	t	language:Make
./build/io/io.asm.o	Makefile	/^.\/build\/io\/io.asm.o: .\/src\/io\/io.asm$/;"	t	language:Make
./build/kernel.asm.o	Makefile	/^.\/build\/kernel.asm.o: .\/src\/kernel.asm$/;"	t	language:Make
./build/kernel.o	Makefile	/^.\/build\/kernel.o: .\/src\/kernel.c$/;"	t	language:Make
./build/memory/heap/heap.o	Makefile	/^.\/build\/memory\/heap\/heap.o: .\/src\/memory\/heap\/heap.c$/;"	t	language:Make
./build/memory/heap/kheap.o	Makefile	/^.\/build\/memory\/heap\/kheap.o: .\/src\/memory\/heap\/kheap.c$/;"	t	language:Make
./build/memory/memory.o	Makefile	/^.\/build\/memory\/memory.o: .\/src\/memory\/memory.c$/;"	t	language:Make
./build/memory/paging/paging.asm.o	Makefile	/^.\/build\/memory\/paging\/paging.asm.o: .\/src\/memory\/paging\/paging.asm$/;"	t	language:Make
./build/memory/paging/paging.o	Makefile	/^.\/build\/memory\/paging\/paging.o: .\/src\/memory\/paging\/paging.c$/;"	t	language:Make
.asm	src/linker.ld	/^    .asm : ALIGN(4096)$/;"	S	language:LdScript
.bss	src/linker.ld	/^    .bss : ALIGN(4096)$/;"	S	language:LdScript
.data	src/linker.ld	/^    .data : ALIGN(4096)$/;"	S	language:LdScript
.rodata	src/linker.ld	/^    .rodata : ALIGN(4096)$/;"	S	language:LdScript
.text	src/linker.ld	/^    .text : ALIGN(4096)$/;"	S	language:LdScript
8086 segment registers	README.md	/^#### 8086 segment registers$/;"	t	language:Markdown
A20 Line	README.md	/^### A20 Line$/;"	S	language:Markdown
Absolute Offset	README.md	/^#### Absolute Offset$/;"	t	language:Markdown
BITS	src/boot/boot.asm	/^BITS 16$/;"	l	language:Asm
BITS	src/boot/boot_before_protected.asm	/^BITS 16$/;"	l	language:Asm
CODE_SEG	src/boot/boot.asm	/^CODE_SEG equ gdt_code - gdt_start$/;"	d	language:Asm
CODE_SEG	src/kernel.asm	/^CODE_SEG equ 0x08   ; kernal code seg$/;"	d	language:Asm
Cross Compiler Install	README.md	/^## Cross Compiler Install$/;"	s	language:Markdown
DATA_SEG	src/boot/boot.asm	/^DATA_SEG equ gdt_data - gdt_start$/;"	d	language:Asm
DATA_SEG	src/kernel.asm	/^DATA_SEG equ 0x10   ; kernal data seg$/;"	d	language:Asm
Disk	README.md	/^## Disk$/;"	s	language:Markdown
EINVARG	src/status.h	/^#define EINVARG /;"	d	language:C++
EIO	src/status.h	/^#define EIO /;"	d	language:C++
ENOMEM	src/status.h	/^#define ENOMEM /;"	d	language:C++
Entering Protected Mode	README.md	/^### Entering Protected Mode$/;"	S	language:Markdown
FILES	Makefile	/^FILES = .\/build\/kernel.asm.o .\/build\/kernel.o .\/build\/idt\/idt.asm.o .\/build\/idt\/idt.o /;"	m	language:Make
FLAGS	Makefile	/^FLAGS = -g -ffreestanding -falign-jumps -falign-functions -falign-labels -falign-loops -fstrengt/;"	m	language:Make
HEAP_BLOCK_HAS_NEXT	src/memory/heap/heap.h	/^#define HEAP_BLOCK_HAS_NEXT /;"	d	language:C++
HEAP_BLOCK_IS_FIRST	src/memory/heap/heap.h	/^#define HEAP_BLOCK_IS_FIRST /;"	d	language:C++
HEAP_BLOCK_TABLE_ENTRY	src/memory/heap/heap.h	/^typedef unsigned char HEAP_BLOCK_TABLE_ENTRY;$/;"	t	language:C++	typeref:typename:unsigned char
HEAP_BLOCK_TABLE_ENTRY_FREE	src/memory/heap/heap.h	/^#define HEAP_BLOCK_TABLE_ENTRY_FREE /;"	d	language:C++
HEAP_BLOCK_TABLE_ENTRY_TAKEN	src/memory/heap/heap.h	/^#define HEAP_BLOCK_TABLE_ENTRY_TAKEN /;"	d	language:C++
Heap	README.md	/^## Heap$/;"	s	language:Markdown
INCLUDES	Makefile	/^INCLUDES = -I.\/src$/;"	m	language:Make
Implementation	README.md	/^### Implementation$/;"	S	language:Markdown
Interrputs	README.md	/^## Interrputs$/;"	s	language:Markdown
Interrputs Table	README.md	/^### Interrputs Table$/;"	S	language:Markdown
Interrupt Descriptor Table	README.md	/^##  Interrupt Descriptor Table$/;"	s	language:Markdown
KERNEL_CODE_SELECTOR	src/config.h	/^#define KERNEL_CODE_SELECTOR /;"	d	language:C++
KERNEL_DATA_SELECTOR	src/config.h	/^#define KERNEL_DATA_SELECTOR /;"	d	language:C++
Memory schemes	README.md	/^### Memory schemes$/;"	S	language:Markdown
Multiple segments are available through the use of segment registers	README.md	/^#### Multiple segments are available through the use of segment registers$/;"	t	language:Markdown
ORG	src/boot/boot.asm	/^ORG 0x7c00$/;"	l	language:Asm
ORG	src/boot/boot_before_protected.asm	/^ORG 0$/;"	l	language:Asm
PAGING_ACCESS_FROM_ALL	src/memory/paging/paging.h	/^#define PAGING_ACCESS_FROM_ALL /;"	d	language:C++
PAGING_CACHE_DISABLED	src/memory/paging/paging.h	/^#define PAGING_CACHE_DISABLED /;"	d	language:C++
PAGING_IS_PRESENT	src/memory/paging/paging.h	/^#define PAGING_IS_PRESENT /;"	d	language:C++
PAGING_IS_WRITABLE	src/memory/paging/paging.h	/^#define PAGING_IS_WRITABLE /;"	d	language:C++
PAGING_PAGE_SIZE	src/memory/paging/paging.h	/^#define PAGING_PAGE_SIZE /;"	d	language:C++
PAGING_TOTAL_ENTRIES_PER_TABLE	src/memory/paging/paging.h	/^#define PAGING_TOTAL_ENTRIES_PER_TABLE /;"	d	language:C++
PAGING_WRITE_THROUGH	src/memory/paging/paging.h	/^#define PAGING_WRITE_THROUGH /;"	d	language:C++
Page Fault Exception	README.md	/^### Page Fault Exception$/;"	S	language:Markdown
Page Table Entry Structure	README.md	/^### Page Table Entry Structure$/;"	S	language:Markdown
Paging	README.md	/^## Paging$/;"	s	language:Markdown
Paging	README.md	/^#### Paging$/;"	t	language:Markdown
Programmable Interrupt Controller	README.md	/^## Programmable Interrupt Controller$/;"	s	language:Markdown
Programs can be loaded in different areas of memory without problems	README.md	/^#### Programs can be loaded in different areas of memory without problems$/;"	t	language:Markdown
Protected Mode	README.md	/^## Protected Mode$/;"	s	language:Markdown
RAOS_ALL_OK	src/status.h	/^#define RAOS_ALL_OK /;"	d	language:C++
RAOS_HEAP_ADDRESS	src/config.h	/^#define RAOS_HEAP_ADDRESS /;"	d	language:C++
RAOS_HEAP_BLOCK_SIZE	src/config.h	/^#define RAOS_HEAP_BLOCK_SIZE /;"	d	language:C++
RAOS_HEAP_SIZE_BYTES	src/config.h	/^#define RAOS_HEAP_SIZE_BYTES /;"	d	language:C++
RAOS_HEAP_TABLE_ADDRESS	src/config.h	/^#define RAOS_HEAP_TABLE_ADDRESS /;"	d	language:C++
RAOS_TOTAL_INTERRUPTS	src/config.h	/^#define RAOS_TOTAL_INTERRUPTS /;"	d	language:C++
Real Mode	README.md	/^## Real Mode$/;"	s	language:Markdown
Reference	README.md	/^## Reference$/;"	s	language:Markdown
Segmentation memory model	README.md	/^### Segmentation memory model$/;"	S	language:Markdown
Selectors	README.md	/^#### Selectors$/;"	t	language:Markdown
Text Mode	README.md	/^## Text Mode$/;"	s	language:Markdown
The first step of bootloader	README.md	/^### The first step of bootloader$/;"	S	language:Markdown
VGA_HEIGHT	src/kernel.h	/^#define VGA_HEIGHT /;"	d	language:C++
VGA_WIDTH	src/kernel.h	/^#define VGA_WIDTH /;"	d	language:C++
_CONFIG_H	src/config.h	/^#define _CONFIG_H$/;"	d	language:C++
_HEAP_H	src/memory/heap/heap.h	/^#define _HEAP_H$/;"	d	language:C++
_IDT_H	src/idt/idt.h	/^#define _IDT_H$/;"	d	language:C++
_IO_H	src/io/io.h	/^#define _IO_H$/;"	d	language:C++
_KERNEL_H	src/kernel.h	/^#define _KERNEL_H$/;"	d	language:C++
_KHEAP_H	src/memory/heap/kheap.h	/^#define _KHEAP_H$/;"	d	language:C++
_MEMORY_H	src/memory/memory.h	/^#define _MEMORY_H$/;"	d	language:C++
_PAGING_H	src/memory/paging/paging.h	/^#define _PAGING_H$/;"	d	language:C++
_STATUS_H	src/status.h	/^#define _STATUS_H$/;"	d	language:C++
_start	src/boot/boot.asm	/^_start:$/;"	l	language:Asm
_start	src/boot/boot_before_protected.asm	/^_start:$/;"	l	language:Asm
_start	src/kernel.asm	/^_start:$/;"	l	language:Asm
all	Makefile	/^all: .\/bin\/boot.bin .\/bin\/kernel.bin$/;"	t	language:Make
ata_lba_read	src/boot/boot.asm	/^ata_lba_read:$/;"	l	language:Asm
base	src/idt/idt.h	/^    uint32_t base;           \/\/ the address of IDT$/;"	m	language:C++	struct:idtr_desc	typeref:typename:uint32_t
before_protected_mode	Makefile	/^before_protected_mode:$/;"	t	language:Make
bootloader	README.md	/^## bootloader$/;"	s	language:Markdown
buffer	src/boot/boot_before_protected.asm	/^buffer:/;"	l	language:Asm
check bin	README.md	/^# check bin$/;"	c	language:Markdown
clean	Makefile	/^clean:$/;"	t	language:Make
current_directory	src/memory/paging/paging.c	/^static uint32_t *current_directory = 0;$/;"	v	language:C	typeref:typename:uint32_t *	file:
directory_entry	src/memory/paging/paging.h	/^  uint32_t *directory_entry;$/;"	m	language:C++	struct:paging_4gb_chunk	typeref:typename:uint32_t *
disable_interrupts	src/idt/idt.asm	/^disable_interrupts:$/;"	l	language:Asm
done	src/boot/boot_before_protected.asm	/^.done:$/;"	l	language:Asm
dw	src/boot/boot.asm	/^dw 0xAA55$/;"	l	language:Asm
dw	src/boot/boot_before_protected.asm	/^dw 0xAA55$/;"	l	language:Asm
enable_interrupts	src/idt/idt.asm	/^enable_interrupts:$/;"	l	language:Asm
enable_paging	src/memory/paging/paging.asm	/^enable_paging:$/;"	l	language:Asm
entries	src/memory/heap/heap.h	/^    HEAP_BLOCK_TABLE_ENTRY* entries;$/;"	m	language:C++	struct:heap_table	typeref:typename:HEAP_BLOCK_TABLE_ENTRY *
error	src/boot/boot_before_protected.asm	/^error:$/;"	l	language:Asm
error_message	src/boot/boot_before_protected.asm	/^error_message: db 'Fail to load sectors.', 0$/;"	d	language:Asm
extern	src/idt/idt.asm	/^extern int21h_handler$/;"	l	language:Asm
extern	src/idt/idt.asm	/^extern no_interrupt_handler$/;"	l	language:Asm
extern	src/kernel.asm	/^extern kernel_main$/;"	l	language:Asm
gdt_code	src/boot/boot.asm	/^gdt_code:         ; CS should point to this$/;"	l	language:Asm
gdt_data	src/boot/boot.asm	/^gdt_data:         ; DS, SS, ES, FS, GS$/;"	l	language:Asm
gdt_descriptor	src/boot/boot.asm	/^gdt_descriptor:$/;"	l	language:Asm
gdt_end	src/boot/boot.asm	/^gdt_end:$/;"	l	language:Asm
gdt_null	src/boot/boot.asm	/^gdt_null:$/;"	l	language:Asm
gdt_start	src/boot/boot.asm	/^gdt_start:$/;"	l	language:Asm
global	src/idt/idt.asm	/^global disable_interrupts$/;"	l	language:Asm
global	src/idt/idt.asm	/^global enable_interrupts$/;"	l	language:Asm
global	src/idt/idt.asm	/^global idt_load$/;"	l	language:Asm
global	src/idt/idt.asm	/^global int21h$/;"	l	language:Asm
global	src/idt/idt.asm	/^global no_interrupt$/;"	l	language:Asm
global	src/io/io.asm	/^global insb$/;"	l	language:Asm
global	src/io/io.asm	/^global insw$/;"	l	language:Asm
global	src/io/io.asm	/^global outb$/;"	l	language:Asm
global	src/io/io.asm	/^global outw$/;"	l	language:Asm
global	src/kernel.asm	/^global _start$/;"	l	language:Asm
global	src/memory/paging/paging.asm	/^global enable_paging$/;"	l	language:Asm
global	src/memory/paging/paging.asm	/^global paging_load_directory$/;"	l	language:Asm
heap	src/memory/heap/heap.h	/^struct heap {$/;"	s	language:C++
heap_address_to_block	src/memory/heap/heap.c	/^int heap_address_to_block(struct heap* heap, void* address) {$/;"	f	language:C	typeref:typename:int	signature:(struct heap * heap,void * address)
heap_block_to_address	src/memory/heap/heap.c	/^void* heap_block_to_address(struct heap* heap, int block_idx) {$/;"	f	language:C	typeref:typename:void *	signature:(struct heap * heap,int block_idx)
heap_create	src/memory/heap/heap.c	/^int heap_create(struct heap *heap, void *ptr, void *end, struct heap_table *table) {$/;"	f	language:C	typeref:typename:int	signature:(struct heap * heap,void * ptr,void * end,struct heap_table * table)
heap_free	src/memory/heap/heap.c	/^void heap_free(struct heap* heap, void* ptr) {$/;"	f	language:C	typeref:typename:void	signature:(struct heap * heap,void * ptr)
heap_get_entry_type	src/memory/heap/heap.c	/^static uint8_t heap_get_entry_type(HEAP_BLOCK_TABLE_ENTRY entry) {$/;"	f	language:C	typeref:typename:uint8_t	file:	signature:(HEAP_BLOCK_TABLE_ENTRY entry)
heap_get_start_block	src/memory/heap/heap.c	/^int heap_get_start_block(struct heap* heap, uint32_t total_blocks) {$/;"	f	language:C	typeref:typename:int	signature:(struct heap * heap,uint32_t total_blocks)
heap_malloc	src/memory/heap/heap.c	/^void* heap_malloc(struct heap* heap, size_t size) {$/;"	f	language:C	typeref:typename:void *	signature:(struct heap * heap,size_t size)
heap_malloc_blocks	src/memory/heap/heap.c	/^void* heap_malloc_blocks(struct heap* heap, uint32_t total_blocks) {$/;"	f	language:C	typeref:typename:void *	signature:(struct heap * heap,uint32_t total_blocks)
heap_mark_block_free	src/memory/heap/heap.c	/^void heap_mark_block_free(struct heap* heap, int start_block) {$/;"	f	language:C	typeref:typename:void	signature:(struct heap * heap,int start_block)
heap_mark_blocks_taken	src/memory/heap/heap.c	/^void heap_mark_blocks_taken(struct heap* heap, int start_block, int total_block) {$/;"	f	language:C	typeref:typename:void	signature:(struct heap * heap,int start_block,int total_block)
heap_round_value_to_upper	src/memory/heap/heap.c	/^static uint32_t heap_round_value_to_upper(uint32_t val) {$/;"	f	language:C	typeref:typename:uint32_t	file:	signature:(uint32_t val)
heap_table	src/memory/heap/heap.h	/^struct heap_table {$/;"	s	language:C++
heap_validate_alignment	src/memory/heap/heap.c	/^static int heap_validate_alignment(void* ptr) {$/;"	f	language:C	typeref:typename:int	file:	signature:(void * ptr)
heap_validate_table	src/memory/heap/heap.c	/^static int heap_validate_table(void* ptr, void* end, struct heap_table* table) {$/;"	f	language:C	typeref:typename:int	file:	signature:(void * ptr,void * end,struct heap_table * table)
idt_desc	src/idt/idt.h	/^struct idt_desc {$/;"	s	language:C++
idt_descriptors	src/idt/idt.c	/^struct idt_desc idt_descriptors[RAOS_TOTAL_INTERRUPTS];$/;"	v	language:C	typeref:struct:idt_desc[]
idt_init	src/idt/idt.c	/^void idt_init() {$/;"	f	language:C	typeref:typename:void	signature:()
idt_load	src/idt/idt.asm	/^idt_load:$/;"	l	language:Asm
idt_set	src/idt/idt.c	/^void idt_set(int interrupt_no, void *address) {$/;"	f	language:C	typeref:typename:void	signature:(int interrupt_no,void * address)
idtr_desc	src/idt/idt.h	/^struct idtr_desc {$/;"	s	language:C++
idtr_descriptors	src/idt/idt.c	/^struct idtr_desc idtr_descriptors;$/;"	v	language:C	typeref:struct:idtr_desc
insb	src/io/io.asm	/^insb:$/;"	l	language:Asm
insw	src/io/io.asm	/^insw:$/;"	l	language:Asm
int21h	src/idt/idt.asm	/^int21h:$/;"	l	language:Asm
int21h_handler	src/idt/idt.c	/^void int21h_handler() {$/;"	f	language:C	typeref:typename:void	signature:()
kernel_chunk	src/kernel.c	/^static struct paging_4gb_chunk* kernel_chunk = NULL;$/;"	v	language:C	typeref:struct:paging_4gb_chunk *	file:
kernel_heap	src/memory/heap/kheap.c	/^struct heap kernel_heap;$/;"	v	language:C	typeref:struct:heap
kernel_heap_table	src/memory/heap/kheap.c	/^struct heap_table kernel_heap_table;$/;"	v	language:C	typeref:struct:heap_table
kernel_main	src/kernel.c	/^void kernel_main() {$/;"	f	language:C	typeref:typename:void	signature:()
kfree	src/memory/heap/kheap.c	/^void kfree(void *ptr) { heap_free(&kernel_heap, ptr); }$/;"	f	language:C	typeref:typename:void	signature:(void * ptr)
kheap_init	src/memory/heap/kheap.c	/^void kheap_init() {$/;"	f	language:C	typeref:typename:void	signature:()
kmalloc	src/memory/heap/kheap.c	/^void *kmalloc(size_t size) { return heap_malloc(&kernel_heap, size); }$/;"	f	language:C	typeref:typename:void *	signature:(size_t size)
kzalloc	src/memory/heap/kheap.c	/^void *kzalloc(size_t size) {$/;"	f	language:C	typeref:typename:void *	signature:(size_t size)
limit	src/idt/idt.h	/^    uint16_t limit;          \/\/ the length of the IDT minus one$/;"	m	language:C++	struct:idtr_desc	typeref:typename:uint16_t
load32	src/boot/boot.asm	/^load32:$/;"	l	language:Asm
load_protected	src/boot/boot.asm	/^.load_protected:$/;"	l	language:Asm
loop	src/boot/boot_before_protected.asm	/^.loop:$/;"	l	language:Asm
memset	src/memory/memory.c	/^void* memset(void *ptr, char c, size_t size) {$/;"	f	language:C	typeref:typename:void *	signature:(void * ptr,char c,size_t size)
mov	src/boot/boot.asm	/^    mov ds, ax     ; Data Segment$/;"	d	language:Asm
mov	src/boot/boot.asm	/^    mov dx, 0x1F0$/;"	d	language:Asm
mov	src/boot/boot.asm	/^    mov dx, 0x1F2$/;"	d	language:Asm
mov	src/boot/boot.asm	/^    mov dx, 0x1F3$/;"	d	language:Asm
mov	src/boot/boot.asm	/^    mov dx, 0x1F4$/;"	d	language:Asm
mov	src/boot/boot.asm	/^    mov dx, 0x1F5$/;"	d	language:Asm
mov	src/boot/boot.asm	/^    mov dx, 0x1F6$/;"	d	language:Asm
mov	src/boot/boot.asm	/^    mov dx, 0x1F7$/;"	d	language:Asm
mov	src/boot/boot_before_protected.asm	/^    mov dh, 0  ; head number$/;"	d	language:Asm
mov	src/boot/boot_before_protected.asm	/^    mov ds, ax     ; Data Segment$/;"	d	language:Asm
mov	src/kernel.asm	/^    mov ds, ax$/;"	d	language:Asm
next_sector	src/boot/boot.asm	/^.next_sector:$/;"	l	language:Asm
no_interrupt	src/idt/idt.asm	/^no_interrupt:$/;"	l	language:Asm
no_interrupt_handler	src/idt/idt.c	/^void no_interrupt_handler() {$/;"	f	language:C	typeref:typename:void	signature:()
offset_1	src/idt/idt.h	/^   uint16_t offset_1;        \/\/ offset bits 0..15$/;"	m	language:C++	struct:idt_desc	typeref:typename:uint16_t
offset_2	src/idt/idt.h	/^   uint16_t offset_2;        \/\/ offset bits 16..31$/;"	m	language:C++	struct:idt_desc	typeref:typename:uint16_t
out	src/boot/boot.asm	/^    out dx, al          ; out, communicate to the bus$/;"	d	language:Asm
out	src/boot/boot.asm	/^    out dx, al$/;"	d	language:Asm
out	src/io/io.asm	/^    out dx, al          ; Output byte in AL to I\/O port address in DX$/;"	d	language:Asm
out	src/io/io.asm	/^    out dx, ax          ; Output word in AX to I\/O port address in DX$/;"	d	language:Asm
outb	src/io/io.asm	/^outb:$/;"	l	language:Asm
outw	src/io/io.asm	/^outw:$/;"	l	language:Asm
paging_4gb_chunk	src/memory/paging/paging.h	/^struct paging_4gb_chunk {$/;"	s	language:C++
paging_4gb_chunk_get_directory	src/memory/paging/paging.c	/^uint32_t *paging_4gb_chunk_get_directory(struct paging_4gb_chunk *chunk) {$/;"	f	language:C	typeref:typename:uint32_t *	signature:(struct paging_4gb_chunk * chunk)
paging_get_index	src/memory/paging/paging.c	/^int paging_get_index(void *virtual_address, uint32_t *directory_idx_out,$/;"	f	language:C	typeref:typename:int	signature:(void * virtual_address,uint32_t * directory_idx_out,uint32_t * table_idx_out)
paging_is_aligned	src/memory/paging/paging.c	/^bool paging_is_aligned(void *addr) {$/;"	f	language:C	typeref:typename:bool	signature:(void * addr)
paging_load_directory	src/memory/paging/paging.asm	/^paging_load_directory:$/;"	l	language:Asm
paging_new_4gb	src/memory/paging/paging.c	/^struct paging_4gb_chunk *paging_new_4gb(uint8_t flags) {$/;"	f	language:C	typeref:struct:paging_4gb_chunk *	signature:(uint8_t flags)
paging_set	src/memory/paging/paging.c	/^int paging_set(uint32_t* directory, void* virt, uint32_t physic) {$/;"	f	language:C	typeref:typename:int	signature:(uint32_t * directory,void * virt,uint32_t physic)
paging_switch	src/memory/paging/paging.c	/^void paging_switch(uint32_t *directory) {$/;"	f	language:C	typeref:typename:void	signature:(uint32_t * directory)
print	src/boot/boot_before_protected.asm	/^print:$/;"	l	language:Asm
print	src/kernel.c	/^void print(const char* str) {$/;"	f	language:C	typeref:typename:void	signature:(const char * str)
print_char	src/boot/boot_before_protected.asm	/^print_char:$/;"	l	language:Asm
run in qemu	README.md	/^# run in qemu$/;"	c	language:Markdown
saddr	src/memory/heap/heap.h	/^    void *saddr;$/;"	m	language:C++	struct:heap	typeref:typename:void *
selector	src/idt/idt.h	/^   uint16_t selector;        \/\/ a code segment selector in GDT or LDT$/;"	m	language:C++	struct:idt_desc	typeref:typename:uint16_t
start	src/boot/boot.asm	/^start:$/;"	l	language:Asm
start	src/boot/boot_before_protected.asm	/^start:$/;"	l	language:Asm
step2	src/boot/boot.asm	/^step2:$/;"	l	language:Asm
step2	src/boot/boot_before_protected.asm	/^step2:$/;"	l	language:Asm
strlen	src/kernel.c	/^size_t strlen(const char* str) {$/;"	f	language:C	typeref:typename:size_t	signature:(const char * str)
table	src/memory/heap/heap.h	/^    struct heap_table* table;$/;"	m	language:C++	struct:heap	typeref:struct:heap_table *
terminal_col	src/kernel.c	/^uint16_t terminal_col = 0;$/;"	v	language:C	typeref:typename:uint16_t
terminal_initialize	src/kernel.c	/^void terminal_initialize() {$/;"	f	language:C	typeref:typename:void	signature:()
terminal_make_char	src/kernel.c	/^uint16_t terminal_make_char(char ch, char color) {$/;"	f	language:C	typeref:typename:uint16_t	signature:(char ch,char color)
terminal_putchar	src/kernel.c	/^void terminal_putchar(size_t x, size_t y, char c, char color) {$/;"	f	language:C	typeref:typename:void	signature:(size_t x,size_t y,char c,char color)
terminal_row	src/kernel.c	/^uint16_t terminal_row = 0;$/;"	v	language:C	typeref:typename:uint16_t
terminal_writechar	src/kernel.c	/^void terminal_writechar(char c, char color) {$/;"	f	language:C	typeref:typename:void	signature:(char c,char color)
times	src/boot/boot.asm	/^times 33 db 0  ; for BIOS parameter block$/;"	l	language:Asm
times	src/boot/boot.asm	/^times 510-($ - $$) db 0$/;"	l	language:Asm
times	src/boot/boot_before_protected.asm	/^times 33 db 0  ; for BIOS parameter block$/;"	l	language:Asm
times	src/boot/boot_before_protected.asm	/^times 510-($ - $$) db 0$/;"	l	language:Asm
times	src/kernel.asm	/^times 512-($ - $$) db 0   ; alignment to 512 bytes/;"	l	language:Asm
total	src/memory/heap/heap.h	/^    size_t total;  \/\/ number of entries$/;"	m	language:C++	struct:heap_table	typeref:typename:size_t
try_again	src/boot/boot.asm	/^.try_again:$/;"	l	language:Asm
type_attr	src/idt/idt.h	/^   uint8_t  type_attr;       \/\/ gate type, dpl, and p fields$/;"	m	language:C++	struct:idt_desc	typeref:typename:uint8_t
video_mem	src/kernel.c	/^uint16_t* video_mem = 0;$/;"	v	language:C	typeref:typename:uint16_t *
zero	src/idt/idt.h	/^   uint8_t  zero;            \/\/ unused, set to 0$/;"	m	language:C++	struct:idt_desc	typeref:typename:uint8_t
